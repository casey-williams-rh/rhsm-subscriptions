/*
 * internal-organizations-sync-api
 * REST interface for the internal-organization-sync service. Please note any deprecated APIs. Our current deprecation policy is to keep deprecated APIs around for at least 6 months.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DefaultResponse;
import org.openapitools.client.model.Errors;
import org.openapitools.client.model.OrgExistsResponse;
import org.openapitools.client.model.OrgInventory;
import org.openapitools.client.model.OrgSyncRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InternalOrganizationsApi {
    private ApiClient localVarApiClient;

    public InternalOrganizationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InternalOrganizationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addOrgsToSyncList
     * @param orgIds Comma separated list of org_ids. (Ex. 123,456,789) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request for adding organizations to the sync list has completed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrgsToSyncListCall(List<String> orgIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/internal/organizations-sync-list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orgIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "org_ids", orgIds));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "PskIdentity" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addOrgsToSyncListValidateBeforeCall(List<String> orgIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orgIds' is set
        if (orgIds == null) {
            throw new ApiException("Missing the required parameter 'orgIds' when calling addOrgsToSyncList(Async)");
        }
        

        okhttp3.Call localVarCall = addOrgsToSyncListCall(orgIds, _callback);
        return localVarCall;

    }

    /**
     * Add a given list of organizations to the database sync list.
     * 
     * @param orgIds Comma separated list of org_ids. (Ex. 123,456,789) (required)
     * @return DefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request for adding organizations to the sync list has completed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponse addOrgsToSyncList(List<String> orgIds) throws ApiException {
        ApiResponse<DefaultResponse> localVarResp = addOrgsToSyncListWithHttpInfo(orgIds);
        return localVarResp.getData();
    }

    /**
     * Add a given list of organizations to the database sync list.
     * 
     * @param orgIds Comma separated list of org_ids. (Ex. 123,456,789) (required)
     * @return ApiResponse&lt;DefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request for adding organizations to the sync list has completed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponse> addOrgsToSyncListWithHttpInfo(List<String> orgIds) throws ApiException {
        okhttp3.Call localVarCall = addOrgsToSyncListValidateBeforeCall(orgIds, null);
        Type localVarReturnType = new TypeToken<DefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add a given list of organizations to the database sync list. (asynchronously)
     * 
     * @param orgIds Comma separated list of org_ids. (Ex. 123,456,789) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request for adding organizations to the sync list has completed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addOrgsToSyncListAsync(List<String> orgIds, final ApiCallback<DefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addOrgsToSyncListValidateBeforeCall(orgIds, _callback);
        Type localVarReturnType = new TypeToken<DefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getInventoryForOrg
     * @param orgId  (required)
     * @param limit The numbers of items to return (required)
     * @param offset The number of items to skip before starting to collect the result set (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInventoryForOrgCall(String orgId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/internal/organizations/{org_id}/inventory"
            .replaceAll("\\{" + "org_id" + "\\}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "PskIdentity" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getInventoryForOrgValidateBeforeCall(String orgId, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling getInventoryForOrg(Async)");
        }
        
        // verify the required parameter 'limit' is set
        if (limit == null) {
            throw new ApiException("Missing the required parameter 'limit' when calling getInventoryForOrg(Async)");
        }
        

        okhttp3.Call localVarCall = getInventoryForOrgCall(orgId, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * See conduit representation of an org&#39;s systems from RHSM.
     * 
     * @param orgId  (required)
     * @param limit The numbers of items to return (required)
     * @param offset The number of items to skip before starting to collect the result set (optional)
     * @return OrgInventory
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public OrgInventory getInventoryForOrg(String orgId, Integer limit, Integer offset) throws ApiException {
        ApiResponse<OrgInventory> localVarResp = getInventoryForOrgWithHttpInfo(orgId, limit, offset);
        return localVarResp.getData();
    }

    /**
     * See conduit representation of an org&#39;s systems from RHSM.
     * 
     * @param orgId  (required)
     * @param limit The numbers of items to return (required)
     * @param offset The number of items to skip before starting to collect the result set (optional)
     * @return ApiResponse&lt;OrgInventory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrgInventory> getInventoryForOrgWithHttpInfo(String orgId, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = getInventoryForOrgValidateBeforeCall(orgId, limit, offset, null);
        Type localVarReturnType = new TypeToken<OrgInventory>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * See conduit representation of an org&#39;s systems from RHSM. (asynchronously)
     * 
     * @param orgId  (required)
     * @param limit The numbers of items to return (required)
     * @param offset The number of items to skip before starting to collect the result set (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getInventoryForOrgAsync(String orgId, Integer limit, Integer offset, final ApiCallback<OrgInventory> _callback) throws ApiException {

        okhttp3.Call localVarCall = getInventoryForOrgValidateBeforeCall(orgId, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<OrgInventory>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for hasOrgInSyncList
     * @param orgId  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request to check the sync list for given org ID has successfully completed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hasOrgInSyncListCall(String orgId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/internal/organizations-sync-list/{org_id}"
            .replaceAll("\\{" + "org_id" + "\\}", localVarApiClient.escapeString(orgId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "PskIdentity" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call hasOrgInSyncListValidateBeforeCall(String orgId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orgId' is set
        if (orgId == null) {
            throw new ApiException("Missing the required parameter 'orgId' when calling hasOrgInSyncList(Async)");
        }
        

        okhttp3.Call localVarCall = hasOrgInSyncListCall(orgId, _callback);
        return localVarCall;

    }

    /**
     * Check if given Org ID is in the database sync list.
     * 
     * @param orgId  (required)
     * @return OrgExistsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request to check the sync list for given org ID has successfully completed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public OrgExistsResponse hasOrgInSyncList(String orgId) throws ApiException {
        ApiResponse<OrgExistsResponse> localVarResp = hasOrgInSyncListWithHttpInfo(orgId);
        return localVarResp.getData();
    }

    /**
     * Check if given Org ID is in the database sync list.
     * 
     * @param orgId  (required)
     * @return ApiResponse&lt;OrgExistsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request to check the sync list for given org ID has successfully completed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OrgExistsResponse> hasOrgInSyncListWithHttpInfo(String orgId) throws ApiException {
        okhttp3.Call localVarCall = hasOrgInSyncListValidateBeforeCall(orgId, null);
        Type localVarReturnType = new TypeToken<OrgExistsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check if given Org ID is in the database sync list. (asynchronously)
     * 
     * @param orgId  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request to check the sync list for given org ID has successfully completed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call hasOrgInSyncListAsync(String orgId, final ApiCallback<OrgExistsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = hasOrgInSyncListValidateBeforeCall(orgId, _callback);
        Type localVarReturnType = new TypeToken<OrgExistsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeOrgsFromSyncList
     * @param orgIds Comma separated list of org_ids. (Ex. 123,456,789) (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request for removing organizations from the sync list has completed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeOrgsFromSyncListCall(List<String> orgIds, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/internal/organizations-sync-list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (orgIds != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("csv", "org_ids", orgIds));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "PskIdentity" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeOrgsFromSyncListValidateBeforeCall(List<String> orgIds, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orgIds' is set
        if (orgIds == null) {
            throw new ApiException("Missing the required parameter 'orgIds' when calling removeOrgsFromSyncList(Async)");
        }
        

        okhttp3.Call localVarCall = removeOrgsFromSyncListCall(orgIds, _callback);
        return localVarCall;

    }

    /**
     * Remove a given list of organizations from the database sync list.
     * 
     * @param orgIds Comma separated list of org_ids. (Ex. 123,456,789) (required)
     * @return DefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request for removing organizations from the sync list has completed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponse removeOrgsFromSyncList(List<String> orgIds) throws ApiException {
        ApiResponse<DefaultResponse> localVarResp = removeOrgsFromSyncListWithHttpInfo(orgIds);
        return localVarResp.getData();
    }

    /**
     * Remove a given list of organizations from the database sync list.
     * 
     * @param orgIds Comma separated list of org_ids. (Ex. 123,456,789) (required)
     * @return ApiResponse&lt;DefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request for removing organizations from the sync list has completed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponse> removeOrgsFromSyncListWithHttpInfo(List<String> orgIds) throws ApiException {
        okhttp3.Call localVarCall = removeOrgsFromSyncListValidateBeforeCall(orgIds, null);
        Type localVarReturnType = new TypeToken<DefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove a given list of organizations from the database sync list. (asynchronously)
     * 
     * @param orgIds Comma separated list of org_ids. (Ex. 123,456,789) (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request for removing organizations from the sync list has completed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeOrgsFromSyncListAsync(List<String> orgIds, final ApiCallback<DefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeOrgsFromSyncListValidateBeforeCall(orgIds, _callback);
        Type localVarReturnType = new TypeToken<DefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for syncFullOrgList
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request for syncing all organizations is successfully running. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call syncFullOrgListCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/internal/rpc/syncAllOrgs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "PskIdentity" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call syncFullOrgListValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = syncFullOrgListCall(_callback);
        return localVarCall;

    }

    /**
     * Sync all organizations.
     * 
     * @return DefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request for syncing all organizations is successfully running. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponse syncFullOrgList() throws ApiException {
        ApiResponse<DefaultResponse> localVarResp = syncFullOrgListWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Sync all organizations.
     * 
     * @return ApiResponse&lt;DefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request for syncing all organizations is successfully running. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponse> syncFullOrgListWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = syncFullOrgListValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<DefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sync all organizations. (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> The request for syncing all organizations is successfully running. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call syncFullOrgListAsync(final ApiCallback<DefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = syncFullOrgListValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<DefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for syncOrg
     * @param orgSyncRequest ID of Organization to sync (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request for syncing organization has completed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call syncOrgCall(OrgSyncRequest orgSyncRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = orgSyncRequest;

        // create path and map variables
        String localVarPath = "/internal/rpc/syncOrg";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "PskIdentity" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call syncOrgValidateBeforeCall(OrgSyncRequest orgSyncRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'orgSyncRequest' is set
        if (orgSyncRequest == null) {
            throw new ApiException("Missing the required parameter 'orgSyncRequest' when calling syncOrg(Async)");
        }
        

        okhttp3.Call localVarCall = syncOrgCall(orgSyncRequest, _callback);
        return localVarCall;

    }

    /**
     * Sync organization for given org_id.
     * 
     * @param orgSyncRequest ID of Organization to sync (required)
     * @return DefaultResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request for syncing organization has completed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public DefaultResponse syncOrg(OrgSyncRequest orgSyncRequest) throws ApiException {
        ApiResponse<DefaultResponse> localVarResp = syncOrgWithHttpInfo(orgSyncRequest);
        return localVarResp.getData();
    }

    /**
     * Sync organization for given org_id.
     * 
     * @param orgSyncRequest ID of Organization to sync (required)
     * @return ApiResponse&lt;DefaultResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request for syncing organization has completed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DefaultResponse> syncOrgWithHttpInfo(OrgSyncRequest orgSyncRequest) throws ApiException {
        okhttp3.Call localVarCall = syncOrgValidateBeforeCall(orgSyncRequest, null);
        Type localVarReturnType = new TypeToken<DefaultResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sync organization for given org_id. (asynchronously)
     * 
     * @param orgSyncRequest ID of Organization to sync (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> The request for syncing organization has completed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The server could could not process the current request. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The request was valid, but the request was refused by the server. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> The requested resource was not found. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An internal server error has occurred and is not recoverable. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call syncOrgAsync(OrgSyncRequest orgSyncRequest, final ApiCallback<DefaultResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = syncOrgValidateBeforeCall(orgSyncRequest, _callback);
        Type localVarReturnType = new TypeToken<DefaultResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
